name: Deploy Site to GCS + Cloud CDN

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read bucket_name from tfvars
      working-directory: terraform
      run: |
        bucket=$(grep '^\s*bucket_name' terraform.tfvars \
                  | sed -E 's/.*= *"([^"]+)".*/\1/')
        echo "BUCKET_NAME=$bucket" >> $GITHUB_ENV

    # ------------------------------------------------------------------
    # 2. Setup Node and build the static site
    # ------------------------------------------------------------------
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: npm
        cache-dependency-path: build/package-lock.json

    - name: Install dependencies and build
      working-directory: build
      run: |
        npm install
        npm run build



    # ------------------------------------------------------------------
    # 3. Decode Cloudgo SA key → creds for *Terraform backend* (state)
    # ------------------------------------------------------------------
    - name: Set Cloudgo AWS credentials for Terraform remote backend
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.CLOUDGO_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.CLOUDGO_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_REGION=us-east-2" >> $GITHUB_ENV

    # ------------------------------------------------------------------
    # 4. Install Terraform CLI
    # ------------------------------------------------------------------
    - name: Setup Terraform CLI
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0 

    # ------------------------------------------------------------------
    # 5. Terraform init (uses Cloudgo creds to reach cloudgo-state-storage)
    # ------------------------------------------------------------------
    - name: Terraform Init (backend)
      working-directory: terraform
      run: |
        terraform init \
          -input=false \
          -reconfigure \
          -force-copy

    # ------------------------------------------------------------------
    # 6. Switch to **user** GCP creds for the actual deployment
    # ------------------------------------------------------------------
    - name: Configure USER GCP credentials
    #had to do this shell and env to ensure newlines and stuff got preserved
      shell: bash
      env:
        GCP_KEY_JSON: ${{ secrets.USER_SERVICE_KEY }}
      run: |
        printf '%s' "$GCP_KEY_JSON" > $HOME/user-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/user-key.json" >> $GITHUB_ENV


    # Validate account
    - name: Validate GCP identity
      run: |
        gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
        gcloud auth list
 


    # ------------------------------------------------------------------
    # 7. Check if GCS bucket exists
    # ------------------------------------------------------------------
    - name: Check if GCS bucket exists
      id: check_bucket
      run: |
        if gsutil ls -b gs://"$BUCKET_NAME" > /dev/null 2>&1; then
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi
    - name: Import GCS bucket into Terraform state
      if: steps.check_bucket.outputs.exists == 'true'
      working-directory: terraform
      run: |
        terraform init -input=false
        terraform import -input=false \
          google_storage_bucket.site_bucket "$BUCKET_NAME" || true
    - name: Skip import (bucket not found)
      if: steps.check_bucket.outputs.exists != 'true'
      run: echo "Bucket $BUCKET_NAME does not exist yet; Terraform will create it on apply."

    # ------------------------------------------------------------------
    # 8. Plan + Apply using USER creds
    # ------------------------------------------------------------------
    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan

    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve

    # ------------------------------------------------------------------
    # 9. Upload build artefacts to GCS
    # ------------------------------------------------------------------
    # (Make sure you’ve already authenticated via google-github-actions/auth@v1 / setup-gcloud@v1)

    - name: Sync build folder to GCS
      uses: google-github-actions/upload-cloud-storage@v1
      with:
        path: build/dist
        destination: ${{ env.BUCKET_NAME }}
        predefinedAcl: publicRead
        gzip: true
        headers: |
          cache-control:public, max-age=3600
